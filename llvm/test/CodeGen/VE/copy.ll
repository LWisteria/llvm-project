; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=ve-unknown-unknown -mattr=-packed | FileCheck %s

; Function Attrs: norecurse nounwind readnone
define signext i8 @copyi8(i8 signext, i8 returned signext) {
; CHECK-LABEL: copyi8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (,%s11)
; CHECK-NEXT:    st %s10, 8(,%s11)
; CHECK-NEXT:    st %s15, 24(,%s11)
; CHECK-NEXT:    st %s16, 32(,%s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s13, -176
; CHECK-NEXT:    and %s13, %s13, (32)0
; CHECK-NEXT:    lea.sl %s11, -1(%s11, %s13)
; CHECK-NEXT:    brge.l %s11, %s8, .LBB0_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(,%s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB0_2:
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s16, 32(,%s11)
; CHECK-NEXT:    ld %s15, 24(,%s11)
; CHECK-NEXT:    ld %s10, 8(,%s11)
; CHECK-NEXT:    ld %s9, (,%s11)
; CHECK-NEXT:    b.l (,%lr)
  ret i8 %1
}

; Function Attrs: norecurse nounwind readnone
define signext i16 @copyi16(i16 signext, i16 returned signext) {
; CHECK-LABEL: copyi16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (,%s11)
; CHECK-NEXT:    st %s10, 8(,%s11)
; CHECK-NEXT:    st %s15, 24(,%s11)
; CHECK-NEXT:    st %s16, 32(,%s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s13, -176
; CHECK-NEXT:    and %s13, %s13, (32)0
; CHECK-NEXT:    lea.sl %s11, -1(%s11, %s13)
; CHECK-NEXT:    brge.l %s11, %s8, .LBB1_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(,%s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB1_2:
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s16, 32(,%s11)
; CHECK-NEXT:    ld %s15, 24(,%s11)
; CHECK-NEXT:    ld %s10, 8(,%s11)
; CHECK-NEXT:    ld %s9, (,%s11)
; CHECK-NEXT:    b.l (,%lr)
  ret i16 %1
}

; Function Attrs: norecurse nounwind readnone
define i32 @copyi32(i32, i32 returned) {
; CHECK-LABEL: copyi32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (,%s11)
; CHECK-NEXT:    st %s10, 8(,%s11)
; CHECK-NEXT:    st %s15, 24(,%s11)
; CHECK-NEXT:    st %s16, 32(,%s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s13, -176
; CHECK-NEXT:    and %s13, %s13, (32)0
; CHECK-NEXT:    lea.sl %s11, -1(%s11, %s13)
; CHECK-NEXT:    brge.l %s11, %s8, .LBB2_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(,%s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB2_2:
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s16, 32(,%s11)
; CHECK-NEXT:    ld %s15, 24(,%s11)
; CHECK-NEXT:    ld %s10, 8(,%s11)
; CHECK-NEXT:    ld %s9, (,%s11)
; CHECK-NEXT:    b.l (,%lr)
  ret i32 %1
}

; Function Attrs: norecurse nounwind readnone
define i64 @copyi64(i64, i64 returned) {
; CHECK-LABEL: copyi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (,%s11)
; CHECK-NEXT:    st %s10, 8(,%s11)
; CHECK-NEXT:    st %s15, 24(,%s11)
; CHECK-NEXT:    st %s16, 32(,%s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s13, -176
; CHECK-NEXT:    and %s13, %s13, (32)0
; CHECK-NEXT:    lea.sl %s11, -1(%s11, %s13)
; CHECK-NEXT:    brge.l %s11, %s8, .LBB3_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(,%s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB3_2:
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s16, 32(,%s11)
; CHECK-NEXT:    ld %s15, 24(,%s11)
; CHECK-NEXT:    ld %s10, 8(,%s11)
; CHECK-NEXT:    ld %s9, (,%s11)
; CHECK-NEXT:    b.l (,%lr)
  ret i64 %1
}

; Function Attrs: norecurse nounwind readnone
define i128 @copyi128(i128, i128 returned) {
; CHECK-LABEL: copyi128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (,%s11)
; CHECK-NEXT:    st %s10, 8(,%s11)
; CHECK-NEXT:    st %s15, 24(,%s11)
; CHECK-NEXT:    st %s16, 32(,%s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s13, -176
; CHECK-NEXT:    and %s13, %s13, (32)0
; CHECK-NEXT:    lea.sl %s11, -1(%s11, %s13)
; CHECK-NEXT:    brge.l %s11, %s8, .LBB4_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(,%s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB4_2:
; CHECK-NEXT:    or %s1, 0, %s3
; CHECK-NEXT:    or %s0, 0, %s2
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s16, 32(,%s11)
; CHECK-NEXT:    ld %s15, 24(,%s11)
; CHECK-NEXT:    ld %s10, 8(,%s11)
; CHECK-NEXT:    ld %s9, (,%s11)
; CHECK-NEXT:    b.l (,%lr)
  ret i128 %1
}

; Function Attrs: norecurse nounwind readnone
define float @copyf32(float, float returned) {
; CHECK-LABEL: copyf32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (,%s11)
; CHECK-NEXT:    st %s10, 8(,%s11)
; CHECK-NEXT:    st %s15, 24(,%s11)
; CHECK-NEXT:    st %s16, 32(,%s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s13, -176
; CHECK-NEXT:    and %s13, %s13, (32)0
; CHECK-NEXT:    lea.sl %s11, -1(%s11, %s13)
; CHECK-NEXT:    brge.l %s11, %s8, .LBB5_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(,%s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB5_2:
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s16, 32(,%s11)
; CHECK-NEXT:    ld %s15, 24(,%s11)
; CHECK-NEXT:    ld %s10, 8(,%s11)
; CHECK-NEXT:    ld %s9, (,%s11)
; CHECK-NEXT:    b.l (,%lr)
  ret float %1
}

; Function Attrs: norecurse nounwind readnone
define double @copyf64(double, double returned) {
; CHECK-LABEL: copyf64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (,%s11)
; CHECK-NEXT:    st %s10, 8(,%s11)
; CHECK-NEXT:    st %s15, 24(,%s11)
; CHECK-NEXT:    st %s16, 32(,%s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s13, -176
; CHECK-NEXT:    and %s13, %s13, (32)0
; CHECK-NEXT:    lea.sl %s11, -1(%s11, %s13)
; CHECK-NEXT:    brge.l %s11, %s8, .LBB6_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(,%s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB6_2:
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s16, 32(,%s11)
; CHECK-NEXT:    ld %s15, 24(,%s11)
; CHECK-NEXT:    ld %s10, 8(,%s11)
; CHECK-NEXT:    ld %s9, (,%s11)
; CHECK-NEXT:    b.l (,%lr)
  ret double %1
}

; Function Attrs: norecurse nounwind readnone
define fp128 @copyf128(fp128, fp128 returned) {
; CHECK-LABEL: copyf128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (,%s11)
; CHECK-NEXT:    st %s10, 8(,%s11)
; CHECK-NEXT:    st %s15, 24(,%s11)
; CHECK-NEXT:    st %s16, 32(,%s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s13, -176
; CHECK-NEXT:    and %s13, %s13, (32)0
; CHECK-NEXT:    lea.sl %s11, -1(%s11, %s13)
; CHECK-NEXT:    brge.l %s11, %s8, .LBB7_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(,%s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB7_2:
; CHECK-NEXT:    or %s0, 0, %s2
; CHECK-NEXT:    or %s1, 0, %s3
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s16, 32(,%s11)
; CHECK-NEXT:    ld %s15, 24(,%s11)
; CHECK-NEXT:    ld %s10, 8(,%s11)
; CHECK-NEXT:    ld %s9, (,%s11)
; CHECK-NEXT:    b.l (,%lr)
  ret fp128 %1
}

; Function Attrs: norecurse nounwind readnone
define x86_regcallcc <256 x i32> @__regcall3__copyv256i32(<256 x i32>, <256 x i32> returned) {
; CHECK-LABEL: __regcall3__copyv256i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (,%s11)
; CHECK-NEXT:    st %s10, 8(,%s11)
; CHECK-NEXT:    st %s15, 24(,%s11)
; CHECK-NEXT:    st %s16, 32(,%s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s13, -176
; CHECK-NEXT:    and %s13, %s13, (32)0
; CHECK-NEXT:    lea.sl %s11, -1(%s11, %s13)
; CHECK-NEXT:    brge.l %s11, %s8, .LBB8_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(,%s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB8_2:
; CHECK-NEXT:    lea %s12, 256
; CHECK-NEXT:    lvl %s12
; CHECK-NEXT:    vor %v0,(0)1,%v1
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s16, 32(,%s11)
; CHECK-NEXT:    ld %s15, 24(,%s11)
; CHECK-NEXT:    ld %s10, 8(,%s11)
; CHECK-NEXT:    ld %s9, (,%s11)
; CHECK-NEXT:    b.l (,%lr)
  ret <256 x i32> %1
}

; Function Attrs: norecurse nounwind readnone
define x86_regcallcc <256 x i64> @__regcall3__copyv256i64(<256 x i64>, <256 x i64> returned) {
; CHECK-LABEL: __regcall3__copyv256i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (,%s11)
; CHECK-NEXT:    st %s10, 8(,%s11)
; CHECK-NEXT:    st %s15, 24(,%s11)
; CHECK-NEXT:    st %s16, 32(,%s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s13, -176
; CHECK-NEXT:    and %s13, %s13, (32)0
; CHECK-NEXT:    lea.sl %s11, -1(%s11, %s13)
; CHECK-NEXT:    brge.l %s11, %s8, .LBB9_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(,%s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB9_2:
; CHECK-NEXT:    lea %s12, 256
; CHECK-NEXT:    lvl %s12
; CHECK-NEXT:    vor %v0,(0)1,%v1
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s16, 32(,%s11)
; CHECK-NEXT:    ld %s15, 24(,%s11)
; CHECK-NEXT:    ld %s10, 8(,%s11)
; CHECK-NEXT:    ld %s9, (,%s11)
; CHECK-NEXT:    b.l (,%lr)
  ret <256 x i64> %1
}

; Function Attrs: norecurse nounwind readnone
define x86_regcallcc <256 x float> @__regcall3__copyv256f32(<256 x float>, <256 x float> returned) {
; CHECK-LABEL: __regcall3__copyv256f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (,%s11)
; CHECK-NEXT:    st %s10, 8(,%s11)
; CHECK-NEXT:    st %s15, 24(,%s11)
; CHECK-NEXT:    st %s16, 32(,%s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s13, -176
; CHECK-NEXT:    and %s13, %s13, (32)0
; CHECK-NEXT:    lea.sl %s11, -1(%s11, %s13)
; CHECK-NEXT:    brge.l %s11, %s8, .LBB10_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(,%s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB10_2:
; CHECK-NEXT:    lea %s12, 256
; CHECK-NEXT:    lvl %s12
; CHECK-NEXT:    vor %v0,(0)1,%v1
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s16, 32(,%s11)
; CHECK-NEXT:    ld %s15, 24(,%s11)
; CHECK-NEXT:    ld %s10, 8(,%s11)
; CHECK-NEXT:    ld %s9, (,%s11)
; CHECK-NEXT:    b.l (,%lr)
  ret <256 x float> %1
}

; Function Attrs: norecurse nounwind readnone
define x86_regcallcc <256 x double> @__regcall3__copyv256f64(<256 x double>, <256 x double> returned) {
; CHECK-LABEL: __regcall3__copyv256f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (,%s11)
; CHECK-NEXT:    st %s10, 8(,%s11)
; CHECK-NEXT:    st %s15, 24(,%s11)
; CHECK-NEXT:    st %s16, 32(,%s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s13, -176
; CHECK-NEXT:    and %s13, %s13, (32)0
; CHECK-NEXT:    lea.sl %s11, -1(%s11, %s13)
; CHECK-NEXT:    brge.l %s11, %s8, .LBB11_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(,%s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB11_2:
; CHECK-NEXT:    lea %s12, 256
; CHECK-NEXT:    lvl %s12
; CHECK-NEXT:    vor %v0,(0)1,%v1
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s16, 32(,%s11)
; CHECK-NEXT:    ld %s15, 24(,%s11)
; CHECK-NEXT:    ld %s10, 8(,%s11)
; CHECK-NEXT:    ld %s9, (,%s11)
; CHECK-NEXT:    b.l (,%lr)
  ret <256 x double> %1
}

; Function Attrs: norecurse nounwind readnone
define x86_regcallcc <512 x i32> @__regcall3__copyv512i32(<512 x i32>, <512 x i32> returned) {
; CHECK-LABEL: __regcall3__copyv512i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (,%s11)
; CHECK-NEXT:    st %s10, 8(,%s11)
; CHECK-NEXT:    st %s15, 24(,%s11)
; CHECK-NEXT:    st %s16, 32(,%s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s13, -176
; CHECK-NEXT:    and %s13, %s13, (32)0
; CHECK-NEXT:    lea.sl %s11, -1(%s11, %s13)
; CHECK-NEXT:    brge.l %s11, %s8, .LBB12_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(,%s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB12_2:
; CHECK-NEXT:    lea %s12, 256
; CHECK-NEXT:    lvl %s12
; CHECK-NEXT:    vor %v1,(0)1,%v3
; CHECK-NEXT:    lea %s12, 256
; CHECK-NEXT:    lvl %s12
; CHECK-NEXT:    vor %v0,(0)1,%v2
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s16, 32(,%s11)
; CHECK-NEXT:    ld %s15, 24(,%s11)
; CHECK-NEXT:    ld %s10, 8(,%s11)
; CHECK-NEXT:    ld %s9, (,%s11)
; CHECK-NEXT:    b.l (,%lr)
  ret <512 x i32> %1
}

; Function Attrs: norecurse nounwind readnone
define x86_regcallcc <512 x float> @__regcall3__copyv512f32(<512 x float>, <512 x float> returned) {
; CHECK-LABEL: __regcall3__copyv512f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (,%s11)
; CHECK-NEXT:    st %s10, 8(,%s11)
; CHECK-NEXT:    st %s15, 24(,%s11)
; CHECK-NEXT:    st %s16, 32(,%s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s13, -176
; CHECK-NEXT:    and %s13, %s13, (32)0
; CHECK-NEXT:    lea.sl %s11, -1(%s11, %s13)
; CHECK-NEXT:    brge.l %s11, %s8, .LBB13_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(,%s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB13_2:
; CHECK-NEXT:    lea %s12, 256
; CHECK-NEXT:    lvl %s12
; CHECK-NEXT:    vor %v1,(0)1,%v3
; CHECK-NEXT:    lea %s12, 256
; CHECK-NEXT:    lvl %s12
; CHECK-NEXT:    vor %v0,(0)1,%v2
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s16, 32(,%s11)
; CHECK-NEXT:    ld %s15, 24(,%s11)
; CHECK-NEXT:    ld %s10, 8(,%s11)
; CHECK-NEXT:    ld %s9, (,%s11)
; CHECK-NEXT:    b.l (,%lr)
  ret <512 x float> %1
}

; Function Attrs: norecurse nounwind readnone
define x86_regcallcc <256 x i1> @__regcall3__copyv256i1(<256 x i1>, <256 x i1> returned) {
; CHECK-LABEL: __regcall3__copyv256i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (,%s11)
; CHECK-NEXT:    st %s10, 8(,%s11)
; CHECK-NEXT:    st %s15, 24(,%s11)
; CHECK-NEXT:    st %s16, 32(,%s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s13, -176
; CHECK-NEXT:    and %s13, %s13, (32)0
; CHECK-NEXT:    lea.sl %s11, -1(%s11, %s13)
; CHECK-NEXT:    brge.l %s11, %s8, .LBB14_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(,%s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB14_2:
; CHECK-NEXT:    andm %vm1,%vm0,%vm2
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s16, 32(,%s11)
; CHECK-NEXT:    ld %s15, 24(,%s11)
; CHECK-NEXT:    ld %s10, 8(,%s11)
; CHECK-NEXT:    ld %s9, (,%s11)
; CHECK-NEXT:    b.l (,%lr)
  ret <256 x i1> %1
}

; Function Attrs: norecurse nounwind readnone
define x86_regcallcc <512 x i1> @__regcall3__copyv512i1(<512 x i1>, <512 x i1> returned) {
; CHECK-LABEL: __regcall3__copyv512i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (,%s11)
; CHECK-NEXT:    st %s10, 8(,%s11)
; CHECK-NEXT:    st %s15, 24(,%s11)
; CHECK-NEXT:    st %s16, 32(,%s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s13, -176
; CHECK-NEXT:    and %s13, %s13, (32)0
; CHECK-NEXT:    lea.sl %s11, -1(%s11, %s13)
; CHECK-NEXT:    brge.l %s11, %s8, .LBB15_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(,%s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB15_2:
; CHECK-NEXT:    andm %vm2,%vm0,%vm4
; CHECK-NEXT:    andm %vm1,%vm0,%vm3
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s16, 32(,%s11)
; CHECK-NEXT:    ld %s15, 24(,%s11)
; CHECK-NEXT:    ld %s10, 8(,%s11)
; CHECK-NEXT:    ld %s9, (,%s11)
; CHECK-NEXT:    b.l (,%lr)
  ret <512 x i1> %1
}

