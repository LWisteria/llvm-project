#ifndef ADD_VVP_OP
#define ADD_VVP_OP(X)
#endif

#ifndef HANDLE_VP_TO_VVP
#define HANDLE_VP_TO_VVP(VP_ISD, VVP_VEISD)
#endif

#ifndef REGISTER_VVP_OP
#define REGISTER_VVP_OP(X,Y)
#endif

#ifndef REGISTER_TERNARY_VVP_OP
#define REGISTER_TERNARY_VVP_OP(X,Y) REGISTER_VVP_OP(X,Y)
#endif

#ifndef REGISTER_BINARY_VVP_OP
#define REGISTER_BINARY_VVP_OP(X,Y) REGISTER_VVP_OP(X,Y)
#endif

#ifndef REGISTER_UNARY_VVP_OP
#define REGISTER_UNARY_VVP_OP(X,Y) REGISTER_VVP_OP(X,Y)
#endif

#ifndef REGISTER_PACKED
#define REGISTER_PACKED(VVP_NAME)
#endif

#ifndef REGISTER_FPCONV_VVP_OP
#define REGISTER_FPCONV_VVP_OP(X,Y) REGISTER_VVP_OP(X,Y)
#endif

#ifndef REGISTER_ICONV_VVP_OP
#define REGISTER_ICONV_VVP_OP(X,Y) REGISTER_VVP_OP(X,Y)
#endif


// non-standard SIMD operators
ADD_VVP_OP(VVP_GATHER)    HANDLE_VP_TO_VVP(VP_GATHER, VVP_GATHER)
ADD_VVP_OP(VVP_SCATTER)   HANDLE_VP_TO_VVP(VP_SCATTER, VVP_SCATTER)

ADD_VVP_OP(VVP_LOAD)      REGISTER_VVP_OP(VVP_LOAD,LOAD)   HANDLE_VP_TO_VVP(VP_LOAD, VVP_LOAD)   REGISTER_PACKED(VVP_LOAD)
ADD_VVP_OP(VVP_STORE)     REGISTER_VVP_OP(VVP_STORE,STORE) HANDLE_VP_TO_VVP(VP_STORE, VVP_STORE) REGISTER_PACKED(VVP_STORE)

// standard SIMD operators
// int arith
ADD_VVP_OP(VVP_ADD)       REGISTER_BINARY_VVP_OP(VVP_ADD,ADD) HANDLE_VP_TO_VVP(VP_ADD, VVP_ADD) REGISTER_PACKED(VVP_ADD)
ADD_VVP_OP(VVP_MUL)       REGISTER_BINARY_VVP_OP(VVP_MUL,MUL) HANDLE_VP_TO_VVP(VP_MUL, VVP_MUL) 
ADD_VVP_OP(VVP_SUB)       REGISTER_BINARY_VVP_OP(VVP_SUB,SUB) HANDLE_VP_TO_VVP(VP_SUB, VVP_SUB) REGISTER_PACKED(VVP_SUB)
ADD_VVP_OP(VVP_UDIV)      REGISTER_BINARY_VVP_OP(VVP_UDIV,UDIV) HANDLE_VP_TO_VVP(VP_UDIV, VVP_UDIV) 
ADD_VVP_OP(VVP_SDIV)      REGISTER_BINARY_VVP_OP(VVP_SDIV,SDIV) HANDLE_VP_TO_VVP(VP_SDIV, VVP_SDIV) 

ADD_VVP_OP(VVP_AND)       REGISTER_BINARY_VVP_OP(VVP_AND,AND) HANDLE_VP_TO_VVP(VP_AND, VVP_AND) REGISTER_PACKED(VVP_AND)
ADD_VVP_OP(VVP_OR)        REGISTER_BINARY_VVP_OP(VVP_OR,OR)   HANDLE_VP_TO_VVP(VP_OR, VVP_OR)   REGISTER_PACKED(VVP_OR)
ADD_VVP_OP(VVP_XOR)       REGISTER_BINARY_VVP_OP(VVP_XOR,XOR) HANDLE_VP_TO_VVP(VP_XOR, VVP_XOR) REGISTER_PACKED(VVP_XOR)

ADD_VVP_OP(VVP_SRL)       REGISTER_BINARY_VVP_OP(VVP_SRL,SRL) HANDLE_VP_TO_VVP(VP_SRL, VVP_SRL) REGISTER_PACKED(VVP_SRL)
ADD_VVP_OP(VVP_SRA)       REGISTER_BINARY_VVP_OP(VVP_SRA,SRA) HANDLE_VP_TO_VVP(VP_SRA, VVP_SRA) REGISTER_PACKED(VVP_SRA)
ADD_VVP_OP(VVP_SHL)       REGISTER_BINARY_VVP_OP(VVP_SHL,SHL) HANDLE_VP_TO_VVP(VP_SHL, VVP_SHL) REGISTER_PACKED(VVP_SHL)

// fp arith
ADD_VVP_OP(VVP_FADD)      REGISTER_BINARY_VVP_OP(VVP_FADD,FADD) HANDLE_VP_TO_VVP(VP_FADD, VVP_FADD) REGISTER_PACKED(VVP_FADD)
ADD_VVP_OP(VVP_FMUL)      REGISTER_BINARY_VVP_OP(VVP_FMUL,FMUL) HANDLE_VP_TO_VVP(VP_FMUL, VVP_FMUL) 
ADD_VVP_OP(VVP_FSUB)      REGISTER_BINARY_VVP_OP(VVP_FSUB,FSUB) HANDLE_VP_TO_VVP(VP_FSUB, VVP_FSUB) REGISTER_PACKED(VVP_FSUB)
ADD_VVP_OP(VVP_FDIV)      REGISTER_BINARY_VVP_OP(VVP_FDIV,FDIV) HANDLE_VP_TO_VVP(VP_FDIV, VVP_FDIV)

ADD_VVP_OP(VVP_FMINNUM)   REGISTER_BINARY_VVP_OP(VVP_FMINNUM,FMINNUM) HANDLE_VP_TO_VVP(VP_FMINNUM, VVP_FMINNUM)
ADD_VVP_OP(VVP_FMAXNUM)   REGISTER_BINARY_VVP_OP(VVP_FMAXNUM,FMAXNUM) HANDLE_VP_TO_VVP(VP_FMAXNUM, VVP_FMAXNUM)

ADD_VVP_OP(VVP_FFMA)      REGISTER_TERNARY_VVP_OP(VVP_FFMA,FMA) HANDLE_VP_TO_VVP(VP_FMA, VVP_FFMA) REGISTER_PACKED(VVP_FFMA)

// Select
ADD_VVP_OP(VVP_SELECT)    REGISTER_TERNARY_VVP_OP(VVP_SELECT,VSELECT) HANDLE_VP_TO_VVP(VP_SELECT, VVP_SELECT) 
ADD_VVP_OP(VVP_SETCC)     REGISTER_TERNARY_VVP_OP(VVP_SETCC,SETCC) HANDLE_VP_TO_VVP(VP_SETCC, VVP_SETCC) 

// sint <> fp
ADD_VVP_OP(VVP_SINT_TO_FP) REGISTER_FPCONV_VVP_OP(VVP_SINT_TO_FP,SINT_TO_FP)// HANDLE_VP_TO_VVP(VP_SINT_TO_FP,VVP_SINT_TO_FP)
// ADD_VVP_OP(VVP_UINT_TO_FP) REGISTER_FPCONV_VVP_OP(VVP_UINT_TO_FP,UINT_TO_FP)// HANDLE_VP_TO_VVP(VP_UINT_TO_FP,VVP_UINT_TO_FP) // not supported on VE
ADD_VVP_OP(VVP_FP_TO_SINT) REGISTER_FPCONV_VVP_OP(VVP_FP_TO_SINT,FP_TO_SINT)// HANDLE_VP_TO_VVP(VP_FP_TO_SINT,VVP_FP_TO_SINT)
// ADD_VVP_OP(VVP_FP_TO_UINT) REGISTER_FPCONV_VVP_OP(VVP_FP_TO_UINT,FP_TO_UINT)// HANDLE_VP_TO_VVP(VP_FP_TO_UINT,VVP_FP_TO_UINT) // not supported on VE

// int <> int
ADD_VVP_OP(VVP_SEXT)      REGISTER_ICONV_VVP_OP(VVP_SEXT,SIGN_EXTEND)    // HANDLE_VP_TO_VVP(VP_SEXT,VVP_SEXT)
ADD_VVP_OP(VVP_ZEXT)      REGISTER_ICONV_VVP_OP(VVP_ZEXT,ZERO_EXTEND)    // HANDLE_VP_TO_VVP(VP_ZEXT,VVP_ZEXT)

// fpround, fpext
ADD_VVP_OP(VVP_FPEXT)     REGISTER_FPCONV_VVP_OP(VVP_FPEXT,FP_EXTEND)    HANDLE_VP_TO_VVP(VP_FP_EXTEND,VVP_FPEXT)
ADD_VVP_OP(VVP_FPROUND)   REGISTER_FPCONV_VVP_OP(VVP_FPROUND,FP_ROUND) HANDLE_VP_TO_VVP(VP_FROUND,VVP_FPROUND)

#undef ADD_VVP_OP
#undef HANDLE_VP_TO_VVP
#undef REGISTER_VVP_OP
#undef REGISTER_TERNARY_VVP_OP
#undef REGISTER_BINARY_VVP_OP
#undef REGISTER_UNARY_VVP_OP
#undef REGISTER_FPCONV_VVP_OP
#undef REGISTER_ICONV_VVP_OP
#undef REGISTER_PACKED
