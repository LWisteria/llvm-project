# -*- Python -*- vim: set ft=python ts=4 sw=4 expandtab tw=79:
# Configuration file for the 'lit' test runner.
import os
import lit.formats

def append_dynamic_library_path(path):
    if config.operating_system == 'Windows':
        name = 'PATH'
        sep = ';'
    elif config.operating_system == 'Darwin':
        name = 'DYLD_LIBRARY_PATH'
        sep = ':'
    else:
        name = 'LD_LIBRARY_PATH'
        sep = ':'
    if name in config.environment:
        config.environment[name] = path + sep + config.environment[name]
    else:
        config.environment[name] = path

# our test suite's name
config.name = 'sotoc'

# files to treat as test cases
config.suffixes = ['.c']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root object directory where output is placed
config.test_exec_root = config.sotoc_obj_root

# test format
config.test_format = lit.formats.ShTest()

config.test_flags = '-I ' + config.test_source_root + ' ' + \
                    '-I ' + config.omp_header_directory + ' ' + \
                    '-fopenmp ' + \
                    '-Werror=implicit-function-declaration '
                    #'-Xopenmp-target \"-Xlinker -fopenmp-static\" '

# Setup environment to find dynamic library at runtime
append_dynamic_library_path(config.library_dir)

# substitutions
config.substitutions.append(('%sotoc-filecheck-transformed', \
    'FileCheck -input-file=%t.transformed.c %s'))
config.substitutions.append(('%run-on-host', \
    '%compiler -Xopenmp-target "--sotoc-path=%sotoc" \
    -fopenmp -fopenmp-targets=aurora-nec-veort-unknown %s -o %t.o && %t.o'))
config.substitutions.append(('%sotoc-transform-compile', \
    '%sotoc-transform && %sotoc-check-empty && %sotoc-compile'))
config.substitutions.append(('%sotoc-transform', \
    '%sotoc %s -- -fopenmp %cflags > %t.transformed.c'))
config.substitutions.append(('%sotoc-prepare-compilable', \
    'echo -e "#include \\\"main.h\\\"" > %t.transformed.c'))
# avoid to compile a empty file produced by sotoc
config.substitutions.append(('%sotoc-check-empty', \
    'test -s %t.transformed.c'))
config.substitutions.append(('%sotoc-compile', \
    '%compiler %cflags %t.transformed.c -c -o %t.o'))

config.substitutions.append(('%compiler', config.test_compiler))
config.substitutions.append(('%cflags', config.test_flags))
config.substitutions.append(('%sotoc', config.test_sotoc))
